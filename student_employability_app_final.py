# -*- coding: utf-8 -*-
"""student_employability_app_final.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18-3dqWEVtZ9vWPIW7UxmFxQEr8itV66I
"""

# advanced_employability_app_final.py
import streamlit as st
import pandas as pd
import numpy as np
import joblib

# --- CONFIGURATION ---
st.set_page_config(page_title="Student Employability Predictor", layout="centered")

# --- LOAD MODEL & SCALER ---
@st.cache_resource
def load_model():
    try:
        model = joblib.load('employability_predictor.pkl')
        scaler = joblib.load('scaler.pkl')
        return model, scaler
    except FileNotFoundError:
        return None, None

model, scaler = load_model()

feature_columns = [
    'GENDER', 'GENERAL_APPEARANCE', 'GENERAL_POINT_AVERAGE',
    'MANNER_OF_SPEAKING', 'PHYSICAL_CONDITION', 'MENTAL_ALERTNESS',
    'SELF-CONFIDENCE', 'ABILITY_TO_PRESENT_IDEAS', 'COMMUNICATION_SKILLS',
    'STUDENT_PERFORMANCE_RATING', 'NO_SKILLS', 'Year_of_Graduate'
]

if model is None or scaler is None:
    st.error("‚ö†Ô∏è Model or scaler file not found. Please ensure both files exist in the app directory.")
    st.stop()

# --- TITLE & DESCRIPTION ---
st.title("üéì Student Employability Prediction App ‚Äî SVM Model")
st.markdown("""
The best model created ‚Äî **Support Vector Machine (SVM)** ‚Äî is deployed here for predicting employability. Adjust the inputs below and click Predict!
""")
st.markdown("---")

# --- INPUT FORM ---
def get_user_input():
    col1, col2 = st.columns(2)
    inputs = {}

    with col1:
        st.subheader("Attributes")
        inputs['GENDER'] = st.radio("Gender", [0, 1], format_func=lambda x: "Male" if x==1 else "Female", index=1)
        inputs['GENERAL_APPEARANCE'] = st.slider("General Appearance (1-5)", 1, 5, 3)
        inputs['GENERAL_POINT_AVERAGE'] = st.number_input("GPA (0.0-4.0)", 0.0, 4.0, 3.0, 0.01)
        inputs['MANNER_OF_SPEAKING'] = st.slider("Manner of Speaking (1-5)", 1, 5, 3)
        inputs['PHYSICAL_CONDITION'] = st.slider("Physical Condition (1-5)", 1, 5, 3)
        inputs['MENTAL_ALERTNESS'] = st.slider("Mental Alertness (1-5)", 1, 5, 3)

    with col2:
        st.subheader("Skills & Others")
        inputs['SELF-CONFIDENCE'] = st.slider("Self-Confidence (1-5)", 1, 5, 3)
        inputs['ABILITY_TO_PRESENT_IDEAS'] = st.slider("Presenting Ideas (1-5)", 1, 5, 3)
        inputs['COMMUNICATION_SKILLS'] = st.slider("Communication Skills (1-5)", 1, 5, 3)
        inputs['STUDENT_PERFORMANCE_RATING'] = st.slider("Performance Rating (1-5)", 1, 5, 3)
        inputs['NO_SKILLS'] = st.radio("Has No Skills", [0, 1], format_func=lambda x: "No" if x==0 else "Yes", index=0)
        inputs['Year_of_Graduate'] = st.number_input("Year of Graduate (2019‚Äì2022)", 2019, 2022, 2022)

    return pd.DataFrame([inputs])[feature_columns]

# --- PREDICT FUNCTION ---
def predict_employability(model, scaler, input_df):
    scaled_input = scaler.transform(input_df)
    prediction = model.predict(scaled_input)
    prediction_proba = model.predict_proba(scaled_input)[0]
    return prediction[0], prediction_proba

# --- DISPLAY RESULTS ---
def show_results(pred, proba, input_df):
    if pred == 1:
        st.success("üéâ The student is predicted to be **Employable**!")
        st.balloons()
    else:
        st.warning("‚ö†Ô∏è The student is predicted to be **Less Employable**.")

    st.info(f"Probability of being Employable: {proba[1]*100:.2f}%")
    st.info(f"Probability of being Less Employable: {proba[0]*100:.2f}%")

# --- MAIN ---
input_df = get_user_input()

if st.button("Predict Employability"):
    if not all(col in input_df.columns for col in feature_columns):
        st.error("Input columns mismatch. Please check your feature names and order.")
    else:
        pred, proba = predict_employability(model, scaler, input_df)
        show_results(pred, proba, input_df)

st.markdown("---")
st.caption("¬© 2025 CHOONG MUH IN | Graduate Employability Prediction App | Powered by SVM | For research purposes only.")


